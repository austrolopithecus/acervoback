basePath: /
definitions:
  models.Comic:
    properties:
      author:
        type: string
      cover_url:
        type: string
      id:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      publisher:
        type: string
      title:
        type: string
      user_id:
        type: string
      year:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  requests.NewComicRequest:
    properties:
      isbn:
        type: string
    type: object
  requests.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  responses.CommonResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.UserLoginResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
    type: object
  responses.UserMeResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: Projeto Acervo Comics
  title: Acervo Comics
  version: "1.0"
paths:
  /comic:
    get:
      description: Mostra todos os quadrinhos do usuario
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comic'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - TokenAuth: []
      summary: Mostra todos os quadrinhos do usuario
      tags:
      - Comic
    put:
      description: Cria um quadrinho com base no ISBN
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.NewComicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comic'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - TokenAuth: []
      summary: Cria um quadrinho com base no ISBN
      tags:
      - Comic
  /user/login:
    post:
      consumes:
      - application/json
      description: Login de  um  usuário
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Login de  um  usuário
      tags:
      - User
  /user/me:
    get:
      description: Retorna os dados do usuário logado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserMeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - TokenAuth: []
      summary: Retorna os dados do usuário logado
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Registra um novo usuário
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Registra um novo usuário
      tags:
      - User
securityDefinitions:
  TokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
